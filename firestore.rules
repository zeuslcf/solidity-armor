/**
 * @file Firestore Security Rules for Solidity Armor.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model.  Each user can only access their own data, which is stored under their unique user ID.
 * @dataStructure All data is nested under /users/{userId}, ensuring clear ownership. Scans and vulnerability reports are further nested under this path.
 * @keySecurityDecisions
 *   - User listing is explicitly disallowed.
 *   - Authorization independence is achieved by isolating each users data into individual collections
 * @denormalization for authorization
 *   - The `scans` document contains the `userId` to avoid needing to query the parent `user` to determine user ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read or modify their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123' } } }
     * @allow (get) User with ID 'user123' reads their profile.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' updates their profile.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123', name: 'New Name' } } }
     * @allow (delete) User with ID 'user123' deletes their profile.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user456' } } }
     * @deny (get) User with ID 'user123' tries to read the profile of 'user456'.
     *   - Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all user documents

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for scans. Only the authenticated user can read or modify their own scans.
     * @path /users/{userId}/scans/{scanId}
     * @allow (create) User with ID 'user123' creates a scan.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123' } } }
     * @allow (get) User with ID 'user123' reads their scan.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' updates their scan.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user123', status: 'completed' } } }
     * @allow (delete) User with ID 'user123' deletes their scan.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user123' tries to create a scan for 'user456'.
     *   - Request: { auth: { uid: 'user123' }, resource: { data: { userId: 'user456' } } }
     * @deny (get) User with ID 'user123' tries to read the scan of 'user456'.
     *   - Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scans/{scanId} {
       //function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return request.auth != null && request.auth.uid == resource.data.userId;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isOwner(userId) && request.resource.data.userId == userId;
    }

    /**
     * @description Enforces access control for vulnerability reports. Only the authenticated user can read or modify their own reports.
     * @path /users/{userId}/scans/{scanId}/vulnerabilityReports/{reportId}
     * @allow (create) User with ID 'user123' creates a vulnerability report.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (get) User with ID 'user123' reads their vulnerability report.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' updates their vulnerability report.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (delete) User with ID 'user123' deletes their vulnerability report.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user123' tries to create a vulnerability report for 'user456'.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (get) User with ID 'user123' tries to read the vulnerability report of 'user456'.
     *   - Request: { auth: { uid: 'user456' } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/scans/{scanId}/vulnerabilityReports/{reportId} {
       //function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
          return request.auth != null && request.auth.uid == resource.data.userId;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}