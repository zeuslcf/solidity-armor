'use client';

import { useState } from 'react';
import Link from 'next/link';
import { format } from 'date-fns';
import {
  AlertTriangle,
  ArrowLeft,
  ShieldAlert,
  ShieldCheck,
  ShieldQuestion,
  Wand2,
  FileCode,
  Download,
} from 'lucide-react';
import { getFixSuggestion } from '@/lib/actions';
import type { Scan, Vulnerability } from '@/lib/definitions';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import { Spinner } from './icons';
import { CodeBlock } from './code-block';
import { cn } from '@/lib/utils';

function RiskIcon({ severity }: { severity: Vulnerability['severity'] }) {
  switch (severity) {
    case 'Critical':
      return <AlertTriangle className="h-5 w-5 text-red-500" />;
    case 'High':
      return <ShieldAlert className="h-5 w-5 text-orange-500" />;
    case 'Medium':
      return <ShieldAlert className="h-5 w-5 text-yellow-500" />;
    case 'Low':
      return <ShieldQuestion className="h-5 w-5 text-blue-500" />;
    default:
      return <ShieldCheck className="h-5 w-5 text-gray-500" />;
  }
}

function getRiskColorClass(severity: Vulnerability['severity'], element: 'bg' | 'text' | 'border') {
    const colorMap = {
        Critical: 'red',
        High: 'orange',
        Medium: 'yellow',
        Low: 'blue',
    };
    const color = colorMap[severity] || 'gray';

    const classes = {
        bg: `bg-${color}-500/10`,
        text: `text-${color}-400`,
        border: `border-${color}-500/20`,
    };
    return classes[element];
}


function RiskScoreIndicator({ score }: { score: number }) {
    const getBarColor = () => {
      if (score >= 9) return 'bg-red-600';
      if (score >= 7) return 'bg-orange-500';
      if (score >= 4) return 'bg-yellow-500';
      return 'bg-blue-500';
    };
    return (
      <div className="flex items-center gap-2">
        <span className="text-xs font-medium text-muted-foreground w-16">Risk Score</span>
        <Progress value={score * 10} className={`h-2 w-24`} indicatorClassName={getBarColor()} />
        <span className="font-mono text-sm font-medium">{score}/10</span>
      </div>
    );
}

function FixSuggestion({
  vulnerability,
  contractCode,
}: {
  vulnerability: Vulnerability;
  contractCode: string;
}) {
  const [suggestion, setSuggestion] = useState<string | null>(
    vulnerability.suggestedFix || null
  );
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGetSuggestion = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const result = await getFixSuggestion(vulnerability, contractCode);
      setSuggestion(result);
    } catch (e) {
      setError('Failed to get suggestion. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  if (suggestion) {
    return (
        <Card className="mt-4 bg-background/50 border-primary/20 printable-content">
            <CardHeader>
                <CardTitle className="flex items-center text-base gap-2">
                    <Wand2 className="h-5 w-5 text-primary" />
                    AI-Generated Fix Suggestion
                </CardTitle>
            </CardHeader>
            <CardContent>
                <CodeBlock code={suggestion} language="solidity" />
            </CardContent>
        </Card>
    )
  }

  return (
    <div className="mt-4 no-print">
        <Button onClick={handleGetSuggestion} disabled={isLoading} variant="outline" size="sm">
        {isLoading ? (
            <Spinner className="mr-2" />
        ) : (
            <Wand2 className="mr-2 h-4 w-4" />
        )}
        Suggest a Fix
        </Button>
        {error && <p className="text-destructive text-sm mt-2">{error}</p>}
    </div>
  );
}


export default function VulnerabilityReport({ scan, contractCode }: { scan: Scan, contractCode: string }) {
  const { contractName, createdAt, summary, vulnerabilities, riskSummary } = scan;

  const riskCounts = {
    Critical: vulnerabilities.filter(v => v.severity === 'Critical').length,
    High: vulnerabilities.filter(v => v.severity === 'High').length,
    Medium: vulnerabilities.filter(v => v.severity === 'Medium').length,
    Low: vulnerabilities.filter(v => v.severity === 'Low').length,
  };

  const handlePrint = () => {
    window.print();
  };

  const getRiskColorForSummary = (summary: Scan['riskSummary']) => {
    if (summary === 'High' || summary === 'Critical') return 'red';
    if (summary === 'Medium') return 'yellow';
    if (summary === 'Low') return 'blue';
    return 'green';
  };


  return (
    <div className="space-y-8 max-w-4xl mx-auto printable-area">
      <div className="flex items-center justify-between gap-4 no-print">
        <div className="flex items-center gap-4">
          <Button asChild variant="outline" size="icon" className="rounded-full h-9 w-9">
            <Link href="/dashboard">
              <ArrowLeft className="h-4 w-4" />
              <span className="sr-only">Back to Dashboard</span>
            </Link>
          </Button>
          <div>
            <h1 className="text-2xl font-bold font-headline leading-none">{contractName}</h1>
            <p className="text-sm text-muted-foreground">
              Scanned on {format(new Date(createdAt), 'MMMM d, yyyy')}
            </p>
          </div>
        </div>
        <Button onClick={handlePrint} variant="outline">
          <Download className="mr-2 h-4 w-4" />
          Export Report
        </Button>
      </div>

      <div className="print-header hidden print:block mb-8">
        <h1 className="text-3xl font-bold font-headline">Solidity Armor - Security Scan Report</h1>
        <p className="text-lg text-muted-foreground">{contractName}</p>
        <p className="text-sm text-muted-foreground">Scanned on {format(new Date(createdAt), 'MMMM d, yyyy')}</p>
      </div>

      <Card className="border-border/40 bg-card/60 backdrop-blur-sm overflow-hidden printable-content">
        <CardHeader>
          <CardTitle>Analysis Summary</CardTitle>
        </CardHeader>
        <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-6 text-center">
                <div className='flex flex-col items-center justify-center gap-2 p-4 rounded-lg bg-muted/30'>
                    <p className="text-sm font-medium text-muted-foreground">Overall Risk</p>
                    <Badge variant={riskSummary === 'High' || riskSummary === 'Medium' ? 'destructive' : 'secondary'} className={cn("mt-1 text-lg px-4 py-1", riskSummary && getRiskColorClass(riskSummary as Vulnerability['severity'], 'bg'), riskSummary && getRiskColorClass(riskSummary as Vulnerability['severity'], 'text'), riskSummary && getRiskColorClass(riskSummary as Vulnerability['severity'], 'border'))}>
                        {riskSummary || 'N/A'}
                    </Badge>
                </div>
                <div className='flex flex-col items-center justify-center gap-2 p-4 rounded-lg bg-muted/30'>
                    <p className="text-sm font-medium text-muted-foreground">Total Vulnerabilities</p>
                    <p className="text-3xl font-bold">{vulnerabilities.length}</p>
                </div>
                <div className="col-span-2 md:col-span-1 grid grid-cols-2 gap-4 text-left p-4 rounded-lg bg-muted/30">
                    {Object.entries(riskCounts).map(([severity, count]) => (
                        <div key={severity} className="flex items-center gap-2">
                           <div className={cn("h-2 w-2 rounded-full", `bg-${getRiskColorForSummary(severity as Vulnerability['severity'])}-500`)}></div>
                            <span className="font-semibold text-sm">{severity}:</span>
                            <span className="text-muted-foreground font-mono">{count}</span>
                        </div>
                    ))}
                </div>
            </div>
            <Separator className="my-6 bg-border/20" />
            <div className='space-y-2'>
                <h3 className="font-semibold">AI Summary</h3>
                <p className="text-sm text-muted-foreground">{summary}</p>
            </div>
        </CardContent>
      </Card>
      
      <div>
        <h2 className="text-xl font-bold mb-4 font-headline">Detailed Findings</h2>
        {vulnerabilities.length > 0 ? (
          <Accordion type="single" collapsible className="w-full space-y-4">
            {vulnerabilities.map((vuln, index) => (
              <Card key={index} className="border-border/40 bg-card/60 backdrop-blur-sm overflow-hidden break-inside-avoid printable-content">
                <AccordionItem value={`item-${index}`} className="border-b-0">
                    <AccordionTrigger className="p-6 hover:no-underline data-[state=open]:bg-white/5 no-print">
                        <div className="flex items-center justify-between w-full">
                            <div className="flex items-center gap-3 text-left">
                                <RiskIcon severity={vuln.severity} />
                                <span className="font-semibold text-base">{vuln.type}</span>
                            </div>
                            <Badge variant={vuln.severity === 'High' || vuln.severity === 'Critical' || vuln.severity === 'Medium' ? 'destructive' : 'secondary'} 
                                className={cn(getRiskColorClass(vuln.severity, 'bg'), getRiskColorClass(vuln.severity, 'text'), getRiskColorClass(vuln.severity, 'border'))}>
                                {vuln.severity}
                            </Badge>
                        </div>
                    </AccordionTrigger>
                    <div className="print-only-findings-header hidden print:block p-6">
                      <div className="flex items-center justify-between w-full">
                        <div className="flex items-center gap-3 text-left">
                          <RiskIcon severity={vuln.severity} />
                          <span className="font-semibold text-base">{vuln.type}</span>
                        </div>
                        <Badge variant={vuln.severity === 'High' || vuln.severity === 'Critical' || vuln.severity === 'Medium' ? 'destructive' : 'secondary'}
                          className={cn(getRiskColorClass(vuln.severity, 'bg'), getRiskColorClass(vuln.severity, 'text'), getRiskColorClass(vuln.severity, 'border'))}>
                          {vuln.severity}
                        </Badge>
                      </div>
                    </div>
                  <AccordionContent className="px-6 pb-6">
                    <p className="text-muted-foreground text-sm mb-4">{vuln.description}</p>
                    <div className="mb-4">
                      <RiskScoreIndicator score={vuln.riskScore} />
                    </div>
                    <Separator className="mb-4 bg-border/20"/>
                    <FixSuggestion vulnerability={vuln} contractCode={contractCode} />
                  </AccordionContent>
                </AccordionItem>
              </Card>
            ))}
          </Accordion>
        ) : (
          <Card className="flex flex-col items-center justify-center text-center p-12 bg-card/60 backdrop-blur-sm border-border/40 printable-content">
            <ShieldCheck className="h-16 w-16 text-green-500 mb-4" />
            <h3 className="text-xl font-semibold">No Vulnerabilities Found</h3>
            <p className="text-muted-foreground mt-2 max-w-md mx-auto">
              Congratulations! Our automated analysis did not detect any known vulnerabilities in this smart contract.
            </p>
          </Card>
        )}
      </div>

       <Card className="border-border/40 bg-card/60 backdrop-blur-sm overflow-hidden printable-content">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileCode className="h-5 w-5 text-primary" />
            Full Source Code
          </CardTitle>
        </CardHeader>
        <CardContent>
          <CodeBlock code={contractCode} language="solidity" />
        </CardContent>
      </Card>
    </div>
  );
}
